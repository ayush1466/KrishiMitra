# app.py - Updated with OpenAI API integration
from flask import Flask, request, jsonify, render_template
import sqlite3
from datetime import datetime
import os
import logging
import traceback

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Initialize Flask app
app = Flask(__name__, 
            template_folder='templates',
            static_folder='static')

app.config['SECRET_KEY'] = "farmer-advisory-secret-key-2024"
app.config['DATABASE'] = 'farmers.db'

# Manual CORS handling
@app.after_request
def after_request(response):
    response.headers['Access-Control-Allow-Origin'] = '*'
    response.headers['Access-Control-Allow-Headers'] = 'Content-Type,Authorization'
    response.headers['Access-Control-Allow-Methods'] = 'GET,PUT,POST,DELETE,OPTIONS'
    response.headers['Access-Control-Allow-Credentials'] = 'true'
    return response

@app.before_request
def handle_preflight():
    if request.method == "OPTIONS":
        response = jsonify({'status': 'ok'})
        response.headers['Access-Control-Allow-Origin'] = '*'
        response.headers['Access-Control-Allow-Headers'] = 'Content-Type,Authorization'
        response.headers['Access-Control-Allow-Methods'] = 'GET,PUT,POST,DELETE,OPTIONS'
        return response

# Initialize OpenAI
openai_available = False
client = None

try:
    from openai import OpenAI
    
    # Get API key from environment variable
    openai_api_key = os.getenv("OPENAI_API_KEY")
    
    if openai_api_key:
        client = OpenAI(api_key=openai_api_key)
        openai_available = True
        logger.info("‚úÖ OpenAI client initialized successfully")
        logger.info(f"‚úÖ API Key found: {openai_api_key[:8]}...{openai_api_key[-4:]}")
    else:
        logger.warning("‚ö†Ô∏è OPENAI_API_KEY environment variable not found")
        logger.warning("‚ö†Ô∏è Running in demo mode")
        
except ImportError:
    logger.error("‚ùå OpenAI library not installed. Run: pip install openai")
except Exception as e:
    logger.error(f"‚ùå OpenAI initialization error: {e}")

# =====================================================
# Database Functions
# =====================================================
def init_db():
    """Initialize SQLite database"""
    try:
        conn = sqlite3.connect(app.config['DATABASE'])
        c = conn.cursor()
        c.execute('''
            CREATE TABLE IF NOT EXISTS queries (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_query TEXT NOT NULL,
                ai_response TEXT NOT NULL,
                category TEXT,
                language TEXT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                is_openai BOOLEAN DEFAULT 0
            )
        ''')
        conn.commit()
        conn.close()
        logger.info("‚úÖ Database initialized")
        return True
    except Exception as e:
        logger.error(f"‚ùå Database error: {e}")
        return False

# =====================================================
# Category Detection
# =====================================================
def detect_query_category(query):
    """Detect query category with enhanced keywords"""
    query_lower = query.lower()
    
    # Crop/Farming keywords
    if any(word in query_lower for word in [
        'crop', 'crops', 'farming', 'farm', 'cultivation', 'grow', 'growing', 'plant', 'planting',
        'vegetable', 'vegetables', 'rice', 'wheat', 'tomato', 'potato', 'onion', 'cabbage',
        '‡¥ï‡µÉ‡¥∑‡¥ø', '‡¥µ‡¥ø‡¥≥', '‡¥µ‡¥ø‡¥≥‡¥ï‡µæ', '‡¥®‡¥ü‡µç‡¥ü‡µç', '‡¥µ‡¥≥‡µº‡¥§‡µç‡¥§‡µÅ‡¥ï'
    ]):
        return 'crop'
    
    # Pest/Disease keywords
    elif any(word in query_lower for word in [
        'pest', 'bug', 'disease', 'spots', 'yellow', 'brown', 'fungus', 'insect', 'infection',
        '‡¥ï‡µÄ‡¥ü', '‡¥∞‡µã‡¥ó‡¥Ç', '‡¥™‡µÅ‡¥¥‡µÅ', '‡¥™‡µä‡¥ü‡µç‡¥ü‡µç', '‡¥Æ‡¥û‡µç‡¥û', '‡¥§‡¥µ‡¥ø‡¥ü‡µç‡¥ü‡µç'
    ]):
        return 'pest'
    
    # Weather keywords  
    elif any(word in query_lower for word in [
        'weather', 'rain', 'drought', 'temperature', 'humidity', 'wind', 'season',
        '‡¥ï‡¥æ‡¥≤‡¥æ‡¥µ‡¥∏‡µç‡¥•', '‡¥Æ‡¥¥', '‡¥µ‡¥∞‡µæ‡¥ö‡µç‡¥ö', '‡¥§‡¥æ‡¥™‡¥®‡¥ø‡¥≤'
    ]):
        return 'weather'
    
    # Fertilizer keywords
    elif any(word in query_lower for word in [
        'fertilizer', 'fertiliser', 'nutrient', 'npk', 'urea', 'compost', 'manure',
        '‡¥µ‡¥≥', '‡¥™‡µã‡¥∑‡¥ï‡¥Ç', '‡¥Ø‡µÇ‡¥±‡¥ø‡¥Ø'
    ]):
        return 'fertilizer'
    
    # Market keywords
    elif any(word in query_lower for word in [
        'price', 'market', 'sell', 'selling', 'rate', 'cost', 'profit',
        '‡¥µ‡¥ø‡¥≤', '‡¥µ‡¥ø‡¥™‡¥£‡¥ø', '‡¥µ‡¥ø‡µΩ‡¥ï‡µç‡¥ï‡µÅ‡¥ï', '‡¥≤‡¥æ‡¥≠‡¥Ç'
    ]):
        return 'market'
    
    # Government schemes
    elif any(word in query_lower for word in [
        'subsidy', 'scheme', 'government', 'loan', 'pm kisan', 'credit',
        '‡¥∏‡¥¨‡µç‡¥∏‡¥ø‡¥°‡¥ø', '‡¥™‡¥¶‡µç‡¥ß‡¥§‡¥ø', '‡¥∏‡µº‡¥ï‡µç‡¥ï‡¥æ‡µº', '‡¥≤‡µã‡µ∫'
    ]):
        return 'subsidy'
    
    else:
        return 'general'

# =====================================================
# OpenAI Response Function
# =====================================================
def get_openai_response(query, category, language):
    """Get response from OpenAI API"""
    
    if not openai_available or not client:
        logger.warning("OpenAI not available, falling back to demo")
        return get_demo_response(query, category, language)
    
    try:
        # Language-specific instructions
        language_instructions = {
            'en': "Respond in clear, simple English that Indian farmers can understand.",
            'ml': "‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥§‡µç‡¥§‡¥ø‡µΩ ‡¥â‡¥§‡µç‡¥§‡¥∞‡¥Ç ‡¥®‡µΩ‡¥ï‡µÅ‡¥ï. ‡¥ï‡µá‡¥∞‡¥≥‡¥§‡µç‡¥§‡¥ø‡¥≤‡µÜ ‡¥ï‡µº‡¥∑‡¥ï‡µº‡¥ï‡µç‡¥ï‡µç ‡¥Æ‡¥®‡¥∏‡µç‡¥∏‡¥ø‡¥≤‡¥æ‡¥ï‡µÅ‡¥®‡µç‡¥® ‡¥≤‡¥≥‡¥ø‡¥§‡¥Æ‡¥æ‡¥Ø ‡¥≠‡¥æ‡¥∑ ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.",
            'hi': "‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§â‡§§‡•ç‡§§‡§∞ ‡§¶‡•á‡§Ç‡•§ ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§ï‡§ø‡§∏‡§æ‡§®‡•ã‡§Ç ‡§ï‡•ã ‡§∏‡§Æ‡§ù ‡§Ü‡§®‡•á ‡§µ‡§æ‡§≤‡•Ä ‡§∏‡§∞‡§≤ ‡§≠‡§æ‡§∑‡§æ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç‡•§",
            'ta': "‡Æ§‡ÆÆ‡Æø‡Æ¥‡Æø‡Æ≤‡Øç ‡Æ™‡Æ§‡Æø‡Æ≤‡Æ≥‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç. ‡Æá‡Æ®‡Øç‡Æ§‡Æø‡ÆØ ‡Æµ‡Æø‡Æµ‡Æö‡Ææ‡ÆØ‡Æø‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡Æ™‡ØÅ‡Æ∞‡Æø‡ÆØ‡ØÅ‡ÆÆ‡Øç ‡Æé‡Æ≥‡Æø‡ÆØ ‡ÆÆ‡Øä‡Æ¥‡Æø‡ÆØ‡Øà‡Æ™‡Øç ‡Æ™‡ÆØ‡Æ©‡Øç‡Æ™‡Æü‡ØÅ‡Æ§‡Øç‡Æ§‡Æµ‡ØÅ‡ÆÆ‡Øç.",
            'te': "‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å‡∞≤‡±ã ‡∞∏‡∞Æ‡∞æ‡∞ß‡∞æ‡∞®‡∞Ç ‡∞á‡∞µ‡±ç‡∞µ‡∞Ç‡∞°‡∞ø‡•§ ‡∞≠‡∞æ‡∞∞‡∞§‡±Ä‡∞Ø ‡∞∞‡±à‡∞§‡±Å‡∞≤‡∞ï‡±Å ‡∞Ö‡∞∞‡±ç‡∞•‡∞Æ‡∞Ø‡±ç‡∞Ø‡±á ‡∞∏‡∞∞‡∞≥‡∞Æ‡±à‡∞® ‡∞≠‡∞æ‡∞∑‡∞®‡±Å ‡∞â‡∞™‡∞Ø‡±ã‡∞ó‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø‡•§"
        }
        
        lang_instruction = language_instructions.get(language, language_instructions['en'])
        
        # Create system prompt based on category
        system_prompts = {
            'crop': f"""You are KisanMitra, an expert agricultural advisor for Indian farmers.
            
Category: Crop cultivation and farming practices
{lang_instruction}

Provide practical, actionable advice for:
- Suitable crops for Indian climate
- Planting techniques and timing
- Care and maintenance
- Harvesting tips

Keep response under 200 words. Focus on solutions available in India.""",

            'pest': f"""You are KisanMitra, an expert agricultural advisor for Indian farmers.
            
Category: Pest and disease management
{lang_instruction}

Provide practical solutions for:
- Pest identification
- Organic and chemical control methods
- Prevention strategies
- When to seek professional help

Include specific product names and dosages available in India. Keep under 200 words.""",

            'weather': f"""You are KisanMitra, an expert agricultural advisor for Indian farmers.
            
Category: Weather and climate management
{lang_instruction}

Provide advice on:
- Weather preparation for crops
- Seasonal farming practices
- Climate-smart agriculture
- Weather monitoring tools

Focus on Indian climate conditions. Keep under 200 words.""",

            'fertilizer': f"""You are KisanMitra, an expert agricultural advisor for Indian farmers.
            
Category: Fertilizer and soil management
{lang_instruction}

Provide guidance on:
- Soil testing and analysis
- Fertilizer recommendations
- Organic alternatives
- Application methods and timing

Include products available in Indian markets. Keep under 200 words.""",

            'market': f"""You are KisanMitra, an expert agricultural advisor for Indian farmers.
            
Category: Market prices and selling
{lang_instruction}

Provide information about:
- Market price sources (e-NAM, local mandis)
- Better selling strategies
- Value addition techniques
- Market timing

Focus on Indian agricultural markets. Keep under 200 words.""",

            'subsidy': f"""You are KisanMitra, an expert agricultural advisor for Indian farmers.
            
Category: Government schemes and subsidies
{lang_instruction}

Provide information about:
- Available government schemes (PM-KISAN, etc.)
- Eligibility criteria
- Application process
- Required documents

Focus on current Indian government schemes. Keep under 200 words.""",

            'general': f"""You are KisanMitra, an expert agricultural advisor for Indian farmers.
            
{lang_instruction}

Provide helpful agricultural guidance relevant to Indian farming conditions.
If the question is unclear, ask for clarification.
Always end with contact information for local agricultural offices.

Keep under 200 words."""
        }
        
        system_prompt = system_prompts.get(category, system_prompts['general'])
        
        logger.info(f"ü§ñ Calling OpenAI API for category: {category}, language: {language}")
        
        # Call OpenAI API
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": query}
            ],
            max_tokens=400,
            temperature=0.7,
            top_p=1.0
        )
        
        ai_response = response.choices[0].message.content.strip()
        logger.info(f"‚úÖ OpenAI response received: {len(ai_response)} characters")
        
        return ai_response
        
    except Exception as e:
        logger.error(f"‚ùå OpenAI API error: {e}")
        logger.error(traceback.format_exc())
        return get_demo_response(query, category, language)

# =====================================================
# Demo Response (Fallback)
# =====================================================
def get_demo_response(query, category, language):
    """Fallback demo responses"""
    responses = {
        'en': {
            'crop': 'üå± For vegetable farming: 1) Test soil pH, 2) Use quality seeds, 3) Apply balanced NPK fertilizer, 4) Ensure proper drainage. Contact KVK for detailed guidance.',
            'pest': 'üêõ For pest control: Use neem oil (5ml/L water) spray in early morning. For severe cases, consult agricultural extension officer.',
            'weather': 'üå§Ô∏è Use IMD weather apps for forecasts. Ensure proper drainage during monsoon. Plan planting according to seasonal calendar.',
            'fertilizer': 'üå± Get soil tested first. Apply NPK 16:16:16 as base dose. Add organic compost for better soil health.',
            'market': 'üí∞ Check prices on e-NAM portal. Visit local mandis. Join FPO for better rates.',
            'subsidy': 'üèõÔ∏è Apply for PM-KISAN scheme. Visit bank with Aadhaar and land documents.',
            'general': 'üí¨ Contact Krishi Vigyan Kendra for agricultural guidance. Kisan Call Center: 1800-180-1551.'
        },
        'ml': {
            'crop': 'üå± ‡¥™‡¥ö‡µç‡¥ö‡¥ï‡µç‡¥ï‡¥±‡¥ø ‡¥ï‡µÉ‡¥∑‡¥ø‡¥ï‡µç‡¥ï‡µç: 1) ‡¥Æ‡¥£‡µç‡¥£‡µç ‡¥™‡¥∞‡¥ø‡¥∂‡µã‡¥ß‡¥®, 2) ‡¥®‡¥≤‡µç‡¥≤ ‡¥µ‡¥ø‡¥§‡µç‡¥§‡µç, 3) ‡¥∏‡¥Æ‡¥§‡µÅ‡¥≤‡¥ø‡¥§ ‡¥µ‡¥≥, 4) ‡¥®‡¥≤‡µç‡¥≤ ‡¥®‡µÄ‡µº‡¥µ‡¥æ‡¥§‡µç. ‡¥ï‡µÉ‡¥∑‡¥ø ‡¥µ‡¥ø‡¥ú‡µç‡¥û‡¥æ‡¥® ‡¥ï‡µá‡¥®‡µç‡¥¶‡µç‡¥∞‡¥§‡µç‡¥§‡¥ø‡µΩ ‡¥®‡¥ø‡¥®‡µç‡¥®‡µç ‡¥µ‡¥ø‡¥∂‡¥¶‡¥Æ‡¥æ‡¥Ø ‡¥µ‡¥ø‡¥µ‡¥∞‡¥ô‡µç‡¥ô‡µæ.',
            'pest': 'üêõ ‡¥ï‡µÄ‡¥ü‡¥®‡¥ø‡¥Ø‡¥®‡µç‡¥§‡µç‡¥∞‡¥£‡¥§‡µç‡¥§‡¥ø‡¥®‡µç: ‡¥®‡µÄ‡¥Ç ‡¥é‡¥£‡µç‡¥£ (5ml/‡¥≤‡¥ø‡¥±‡µç‡¥±‡µº) ‡¥∞‡¥æ‡¥µ‡¥ø‡¥≤‡µÜ ‡¥§‡¥≥‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï. ‡¥ó‡µÅ‡¥∞‡µÅ‡¥§‡¥∞‡¥Æ‡¥æ‡¥Ø ‡¥ï‡µá‡¥∏‡µÅ‡¥ï‡¥≥‡¥ø‡µΩ ‡¥ï‡µÉ‡¥∑‡¥ø ‡¥ì‡¥´‡µÄ‡¥∏‡¥±‡µÜ ‡¥∏‡¥Æ‡µÄ‡¥™‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.',
            'weather': 'üå§Ô∏è ‡¥ï‡¥æ‡¥≤‡¥æ‡¥µ‡¥∏‡µç‡¥•‡¥Ø‡µç‡¥ï‡µç‡¥ï‡µç IMD ‡¥Ü‡¥™‡µç‡¥™‡µç ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï. ‡¥Æ‡¥¥‡¥ï‡µç‡¥ï‡¥æ‡¥≤‡¥§‡µç‡¥§‡µç ‡¥®‡µÄ‡µº‡¥µ‡¥æ‡¥§‡µç‡¥§‡µç ‡¥â‡¥±‡¥™‡µç‡¥™‡¥æ‡¥ï‡µç‡¥ï‡µÅ‡¥ï.',
            'fertilizer': 'üå± ‡¥Æ‡¥£‡µç‡¥£‡µç ‡¥™‡¥∞‡¥ø‡¥∂‡µã‡¥ß‡¥®‡¥Ø‡µç‡¥ï‡µç‡¥ï‡µç ‡¥∂‡µá‡¥∑‡¥Ç NPK 16:16:16 ‡¥µ‡¥≥ ‡¥á‡¥ü‡µÅ‡¥ï. ‡¥ú‡µà‡¥µ‡¥µ‡¥≥ ‡¥ï‡µÇ‡¥ü‡¥ø ‡¥ö‡µá‡µº‡¥ï‡µç‡¥ï‡µÅ‡¥ï.',
            'market': 'üí∞ e-NAM ‡¥™‡µã‡µº‡¥ü‡µç‡¥ü‡¥≤‡¥ø‡µΩ ‡¥µ‡¥ø‡¥≤ ‡¥®‡µã‡¥ï‡µç‡¥ï‡µÅ‡¥ï. ‡¥™‡µç‡¥∞‡¥æ‡¥¶‡µá‡¥∂‡¥ø‡¥ï ‡¥Æ‡¥æ‡µº‡¥ï‡µç‡¥ï‡¥±‡µç‡¥±‡¥ø‡µΩ ‡¥Ö‡¥®‡µç‡¥µ‡µá‡¥∑‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.',
            'subsidy': 'üèõÔ∏è PM-KISAN ‡¥™‡¥¶‡µç‡¥ß‡¥§‡¥ø‡¥ï‡µç‡¥ï‡µç ‡¥Ö‡¥™‡µá‡¥ï‡µç‡¥∑‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï. ‡¥Ü‡¥ß‡¥æ‡µº, ‡¥≠‡µÇ‡¥Æ‡¥ø ‡¥∞‡µá‡¥ñ‡¥ï‡¥≥‡µÅ‡¥Æ‡¥æ‡¥Ø‡¥ø ‡¥¨‡¥æ‡¥ô‡µç‡¥ï‡¥ø‡µΩ ‡¥™‡µã‡¥ï‡µÅ‡¥ï.',
            'general': 'üí¨ ‡¥ï‡µÉ‡¥∑‡¥ø ‡¥∏‡¥Ç‡¥∂‡¥Ø‡¥ô‡µç‡¥ô‡µæ‡¥ï‡µç‡¥ï‡µç ‡¥ï‡µÉ‡¥∑‡¥ø ‡¥µ‡¥ø‡¥ú‡µç‡¥û‡¥æ‡¥® ‡¥ï‡µá‡¥®‡µç‡¥¶‡µç‡¥∞‡¥§‡µç‡¥§‡µÜ ‡¥∏‡¥Æ‡µÄ‡¥™‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï. ‡¥ï‡¥ø‡¥∏‡¥æ‡µª ‡¥ï‡µã‡µæ ‡¥∏‡µÜ‡¥®‡µç‡¥±‡µº: 1800-180-1551.'
        }
    }
    
    lang_resp = responses.get(language, responses['en'])
    return lang_resp.get(category, lang_resp['general'])

# =====================================================
# Routes
# =====================================================
@app.route('/')
def index():
    """Serve main page"""
    try:
        return render_template('index.html')
    except Exception as e:
        logger.error(f"Template error: {e}")
        return f"""
        <h1>üåæ KisanMitra - AI Krishi Officer</h1>
        <p>OpenAI Status: {'‚úÖ Connected' if openai_available else '‚ùå Demo Mode'}</p>
        <p>API endpoint: /api/query</p>
        """, 200

@app.route('/api/query', methods=['POST'])
def process_query():
    """Process farmer queries with OpenAI"""
    try:
        # Validate request
        if not request.is_json:
            return jsonify({
                'success': False, 
                'error': 'Content-Type must be application/json'
            }), 400
        
        data = request.get_json()
        if not data:
            return jsonify({
                'success': False, 
                'error': 'No JSON data provided'
            }), 400
        
        user_query = data.get('query', '').strip()
        language = data.get('language', 'en')
        
        if not user_query:
            return jsonify({
                'success': False, 
                'error': 'Query cannot be empty'
            }), 400
        
        logger.info(f"üì• Processing query: '{user_query[:50]}...' (Language: {language})")
        
        # Detect category
        category = detect_query_category(user_query)
        logger.info(f"üìä Detected category: {category}")
        
        # Get AI response
        ai_response = get_openai_response(user_query, category, language)
        
        # Save to database
        try:
            conn = sqlite3.connect(app.config['DATABASE'])
            c = conn.cursor()
            c.execute('''
                INSERT INTO queries (user_query, ai_response, category, language, is_openai)
                VALUES (?, ?, ?, ?, ?)
            ''', (user_query, ai_response, category, language, openai_available))
            conn.commit()
            conn.close()
            logger.info(f"üíæ Query saved to database")
        except Exception as db_error:
            logger.error(f"DB save error: {db_error}")
        
        # Return response
        return jsonify({
            'success': True,
            'response': ai_response,
            'category': category,
            'language': language,
            'is_demo': not openai_available,
            'source': 'openai' if openai_available else 'demo'
        })
        
    except Exception as e:
        logger.error(f"Query processing error: {e}")
        logger.error(traceback.format_exc())
        return jsonify({
            'success': False,
            'error': 'Internal server error occurred'
        }), 500

@app.route('/api/stats')
def get_stats():
    """Get application statistics"""
    try:
        conn = sqlite3.connect(app.config['DATABASE'])
        c = conn.cursor()
        
        c.execute('SELECT COUNT(*) FROM queries')
        total = c.fetchone()[0]
        
        c.execute('SELECT COUNT(*) FROM queries WHERE is_openai = 1')
        openai_queries = c.fetchone()[0]
        
        today = datetime.now().strftime('%Y-%m-%d')
        c.execute('SELECT COUNT(*) FROM queries WHERE DATE(timestamp) = ?', (today,))
        today_count = c.fetchone()[0]
        
        conn.close()
        
        return jsonify({
            'total_queries': total,
            'openai_queries': openai_queries,
            'demo_queries': total - openai_queries,
            'today_queries': today_count,
            'api_status': 'openai' if openai_available else 'demo'
        })
        
    except Exception as e:
        logger.error(f"Stats error: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/health')
def health():
    """Health check"""
    return jsonify({
        'status': 'healthy',
        'openai_available': openai_available,
        'api_key_configured': bool(os.getenv("OPENAI_API_KEY")),
        'timestamp': datetime.now().isoformat()
    })

# =====================================================
# Main
# =====================================================
if __name__ == '__main__':
    print("üåæ KisanMitra - AI Krishi Officer")
    print("=" * 50)
    
    # Check OpenAI setup
    if openai_available:
        print("‚úÖ OpenAI API: Connected")
        print("ü§ñ Mode: Real AI responses")
    else:
        print("‚ö†Ô∏è OpenAI API: Not configured")
        print("ü§ñ Mode: Demo responses")
        print("üí° To enable OpenAI: Set OPENAI_API_KEY environment variable")
    
    # Check file structure
    if os.path.exists('templates'):
        print("‚úÖ Templates folder: Found")
    else:
        print("‚ö†Ô∏è Templates folder: Missing")
    
    if os.path.exists('static'):
        print("‚úÖ Static folder: Found")
    else:
        print("‚ö†Ô∏è Static folder: Missing") 
    
    # Initialize database
    if init_db():
        print("‚úÖ Database: Ready")
    
    print(f"\nüöÄ Server starting on http://127.0.0.1:5000")
    print("=" * 50)
    
    app.run(debug=True, host='127.0.0.1', port=5000)